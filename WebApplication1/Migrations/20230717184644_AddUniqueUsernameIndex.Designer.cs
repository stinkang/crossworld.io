// <auto-generated />
using System;
using CrossWorldApp;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CrossWorldApp.Migrations
{
    [DbContext(typeof(CrossWorldDbContext))]
    [Migration("20230717184644_AddUniqueUsernameIndex")]
    partial class AddUniqueUsernameIndex
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.4.23259.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CrossWorldApp.Models.Clue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClueText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clues");
                });

            modelBuilder.Entity("CrossWorldApp.Models.Crossword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GridJson")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Crosswords");
                });

            modelBuilder.Entity("CrossWorldApp.Models.CrosswordClue", b =>
                {
                    b.Property<int>("CrosswordId")
                        .HasColumnType("int");

                    b.Property<int>("ClueId")
                        .HasColumnType("int");

                    b.HasKey("CrosswordId", "ClueId");

                    b.HasIndex("ClueId");

                    b.ToTable("CrosswordClues");
                });

            modelBuilder.Entity("CrossWorldApp.Models.TestCrossword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CluesString")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GridString")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TestCrosswords");
                });

            modelBuilder.Entity("CrossWorldApp.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CrossWorldApp.Models.Crossword", b =>
                {
                    b.HasOne("CrossWorldApp.Models.User", "User")
                        .WithMany("PublishedCrosswords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CrossWorldApp.Models.CrosswordClue", b =>
                {
                    b.HasOne("CrossWorldApp.Models.Clue", "Clue")
                        .WithMany("CrosswordClues")
                        .HasForeignKey("ClueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CrossWorldApp.Models.Crossword", "Crossword")
                        .WithMany("CrosswordClues")
                        .HasForeignKey("CrosswordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Clue");

                    b.Navigation("Crossword");
                });

            modelBuilder.Entity("CrossWorldApp.Models.TestCrossword", b =>
                {
                    b.HasOne("CrossWorldApp.Models.User", "User")
                        .WithMany("PublishedTestCrosswords")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CrossWorldApp.Models.Clue", b =>
                {
                    b.Navigation("CrosswordClues");
                });

            modelBuilder.Entity("CrossWorldApp.Models.Crossword", b =>
                {
                    b.Navigation("CrosswordClues");
                });

            modelBuilder.Entity("CrossWorldApp.Models.User", b =>
                {
                    b.Navigation("PublishedCrosswords");

                    b.Navigation("PublishedTestCrosswords");
                });
#pragma warning restore 612, 618
        }
    }
}
