/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./lib/Autofiller.ts":
/*!***************************!*\
  !*** ./lib/Autofiller.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Autofiller: () => (/* binding */ Autofiller)\n/* harmony export */ });\n/* harmony import */ var _gridBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gridBase */ \"./lib/gridBase.ts\");\n/* harmony import */ var _autofillGrid__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./autofillGrid */ \"./lib/autofillGrid.ts\");\n/* harmony import */ var _WordDB__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./WordDB */ \"./lib/WordDB.ts\");\n/* harmony import */ var _bitArray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./bitArray */ \"./lib/bitArray.ts\");\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\n\n\n\nvar ResultTag = /*#__PURE__*/function (ResultTag) {\n  ResultTag[ResultTag[\"Recur\"] = 0] = \"Recur\";\n  ResultTag[ResultTag[\"Value\"] = 1] = \"Value\";\n  return ResultTag;\n}(ResultTag || {});\nfunction isRecur(result) {\n  return result.type === ResultTag.Recur;\n}\nfunction recur(grid, discrep, pitched, subset, cont) {\n  return {\n    type: ResultTag.Recur,\n    grid: grid,\n    discrep: discrep,\n    pitched: pitched,\n    subset: subset,\n    cont: cont\n  };\n}\nfunction isValue(result) {\n  return result.type === ResultTag.Value;\n}\nfunction value(x) {\n  return {\n    type: ResultTag.Value,\n    result: x\n  };\n}\nvar Autofiller = /*#__PURE__*/function () {\n  function Autofiller(grid, width, height,\n  // public readonly vBars: Set<number>,\n  // public readonly hBars: Set<number>,\n  onResult, onComplete) {\n    _classCallCheck(this, Autofiller);\n    this.grid = grid;\n    this.width = width;\n    this.height = height;\n    this.onResult = onResult;\n    this.onComplete = onComplete;\n    _defineProperty(this, \"initialGrid\", void 0);\n    _defineProperty(this, \"completed\", void 0);\n    _defineProperty(this, \"solnGrid\", void 0);\n    _defineProperty(this, \"solnCost\", void 0);\n    _defineProperty(this, \"nextStep\", void 0);\n    _defineProperty(this, \"postedSoln\", void 0);\n    _defineProperty(this, \"startTime\", void 0);\n    this.initialGrid = (0,_autofillGrid__WEBPACK_IMPORTED_MODULE_1__.fromTemplate)(this.grid, this.width, this.height\n    // this.vBars,\n    // this.hBars\n    );\n\n    this.completed = false;\n    this.solnCost = null;\n    this.solnGrid = null;\n    this.postedSoln = false;\n    this.startTime = new Date().getTime();\n\n    // Our initial step is a call to recur\n    this.nextStep = recur(this.initialGrid, 10, new Set(), null,\n    // type Cont = (x: AutofillGrid | null) => Result;\n    function (result) {\n      return value(result);\n    });\n  }\n  _createClass(Autofiller, [{\n    key: \"step\",\n    value: function step() {\n      if (!_WordDB__WEBPACK_IMPORTED_MODULE_2__.wordDB) {\n        console.error('Worker has no db but attempting autofill');\n        this.completed = true;\n        return;\n      }\n      if (this.completed) {\n        console.log('Calling step but already completed');\n        return;\n      }\n\n      /* Take as many steps as we can w/in 50ms. After that we need to take a\r\n       * break so that we have a chance to get any new input from the user. */\n      var start = new Date().getTime();\n      while (isRecur(this.nextStep) && new Date().getTime() - start < 50) {\n        this.nextStep = this._solve(this.nextStep.grid, this.nextStep.discrep, this.nextStep.pitched, this.nextStep.subset, this.nextStep.cont);\n      }\n\n      // If it's a \"value\" (not a \"recur\") we're done.\n      if (isValue(this.nextStep)) {\n        console.log('Finished: ' + ((new Date().getTime() - this.startTime) / 1000).toPrecision(4) + 's');\n        this.completed = true;\n        this.onComplete();\n      }\n\n      // If we have a solution that hasn't been posted yet, post it.\n      if (this.solnGrid && !this.postedSoln) {\n        this.postedSoln = true;\n        this.onResult([this.grid /*this.vBars, this.hBars*/], this.solnGrid.cells);\n      }\n    }\n\n    /* Fill out a grid or a subset of a grid */\n  }, {\n    key: \"_solve\",\n    value: function _solve(grid, discrep, pitched, subset, cont) {\n      var _this = this;\n      var baseCost = (0,_autofillGrid__WEBPACK_IMPORTED_MODULE_1__.minGridCost)(grid);\n\n      // We already have a solution that's better than this grid could possibly get\n      if (this.solnCost && baseCost > this.solnCost) {\n        return cont(null);\n      }\n      var entriesToConsider = grid.entries.filter(function (e) {\n        return !e.completedWord;\n      });\n      // There are no entries left to consider, this grid must be a new best solution\n      if (entriesToConsider.length === 0) {\n        this.solnGrid = grid;\n        this.solnCost = baseCost;\n        this.postedSoln = false;\n        return cont(grid);\n      }\n      if (subset !== null) {\n        entriesToConsider = entriesToConsider.filter(function (e) {\n          return subset.has(e.index);\n        });\n      }\n      // There are no entries left in this subset, so we're done with this subsection\n      if (entriesToConsider.length === 0) {\n        return cont(grid);\n      }\n\n      // See if there are any stable subsets  out of the entries we're considering\n      var subsets = (0,_autofillGrid__WEBPACK_IMPORTED_MODULE_1__.stableSubsets)(grid, subset);\n      if (subsets.length > 1 && subsets[0]) {\n        subsets.sort(function (a, b) {\n          return a.size - b.size;\n        });\n        // Attempt to solve the smallest subset\n        return recur(grid, discrep, pitched, subsets[0], function (subsolved) {\n          if (subsolved === null) {\n            // The subset couldn't be solved, so this grid is a failure\n            return cont(null);\n          } else {\n            // Solve the rest of the grid\n            return recur(subsolved, discrep, pitched, subset, cont);\n          }\n        });\n      }\n\n      // Consider entries in order of possible matches\n      entriesToConsider.sort(function (e1, e2) {\n        return (0,_autofillGrid__WEBPACK_IMPORTED_MODULE_1__.numMatchesForEntry)(e1) - (0,_autofillGrid__WEBPACK_IMPORTED_MODULE_1__.numMatchesForEntry)(e2);\n      });\n      var successor = null;\n      var successorDiff = null;\n      var _iterator = _createForOfIteratorHelper(entriesToConsider),\n        _step;\n      try {\n        var _loop = function _loop() {\n          var entry = _step.value;\n          var crosses = (0,_gridBase__WEBPACK_IMPORTED_MODULE_0__.getCrosses)(grid, entry);\n          var bestGrid = null;\n          var bestCost = null;\n          var secondBestCost = null;\n          var skipEntry = false;\n          var failingLetters = [];\n          entry.cells.forEach(function () {\n            failingLetters.push('');\n          });\n          var succeedingLetters = [];\n          entry.cells.forEach(function () {\n            succeedingLetters.push('');\n          });\n          var _iterator2 = _createForOfIteratorHelper(_WordDB__WEBPACK_IMPORTED_MODULE_2__.matchingWords(entry.length, entry.bitmap)),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var _step2$value = _slicedToArray(_step2.value, 2),\n                word = _step2$value[0],\n                preScore = _step2$value[1];\n              if (pitched.has(entry.index + ':' + word)) {\n                continue;\n              }\n              if (grid.usedWords.has(word)) {\n                continue;\n              }\n              var cost = _WordDB__WEBPACK_IMPORTED_MODULE_2__.scoreToCost(preScore) + Math.random() * 0.01;\n\n              // If we have a secondBestCost for this entry we know it's lower than existing soln cost\n              var costToBeat = secondBestCost !== null ? secondBestCost : _this.solnCost;\n\n              // Fail fast based on score change due to this entry alone\n              if (costToBeat !== null && baseCost - entry.minCost + cost > costToBeat) {\n                continue;\n              }\n\n              // Fail fast based on score change due to any crosses\n              var failFast = false;\n              var j = -1;\n              var _iterator3 = _createForOfIteratorHelper(entry.cells.entries()),\n                _step3;\n              try {\n                for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                  var _crosses$_i2$entryInd, _crosses$_i, _failingLetters$_i;\n                  var _step3$value = _slicedToArray(_step3.value, 2),\n                    _i2 = _step3$value[0],\n                    _cellPos = _step3$value[1];\n                  j += 1;\n                  var _cell = (0,_gridBase__WEBPACK_IMPORTED_MODULE_0__.valAt)(grid, _cellPos);\n                  if (_cell !== ' ') {\n                    // Don't need to check cross\n                    j += _cell.length - 1;\n                    continue;\n                  }\n                  var _crossIndex = (_crosses$_i2$entryInd = (_crosses$_i = crosses[_i2]) === null || _crosses$_i === void 0 ? void 0 : _crosses$_i.entryIndex) !== null && _crosses$_i2$entryInd !== void 0 ? _crosses$_i2$entryInd : null;\n                  if (_crossIndex === null) {\n                    continue;\n                  }\n                  var _candidateLetter = word[j];\n                  if (_candidateLetter === undefined) {\n                    throw new Error('oob');\n                  }\n                  if ((_failingLetters$_i = failingLetters[_i2]) !== null && _failingLetters$_i !== void 0 && _failingLetters$_i.includes(_candidateLetter)) {\n                    failFast = true;\n                    break;\n                  }\n                }\n              } catch (err) {\n                _iterator3.e(err);\n              } finally {\n                _iterator3.f();\n              }\n              if (!failFast) {\n                var _j = -1;\n                var _iterator4 = _createForOfIteratorHelper(entry.cells.entries()),\n                  _step4;\n                try {\n                  for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                    var _succeedingLetters$i;\n                    var _step4$value = _slicedToArray(_step4.value, 2),\n                      i = _step4$value[0],\n                      cellPos = _step4$value[1];\n                    _j += 1;\n                    var cell = (0,_gridBase__WEBPACK_IMPORTED_MODULE_0__.valAt)(grid, cellPos);\n                    if (cell !== ' ') {\n                      // Don't need to check cross\n                      _j += cell.length - 1;\n                      continue;\n                    }\n                    var candidateLetter = word[_j];\n                    if (candidateLetter === undefined) {\n                      throw new Error('oob');\n                    }\n                    var crossObj = crosses[i];\n                    if (crossObj === undefined) {\n                      throw new Error('oob');\n                    }\n                    var crossIndex = crossObj.entryIndex;\n                    if (crossIndex === null) {\n                      continue;\n                    }\n                    if ((_succeedingLetters$i = succeedingLetters[i]) !== null && _succeedingLetters$i !== void 0 && _succeedingLetters$i.includes(candidateLetter)) {\n                      continue;\n                    }\n                    var cross = grid.entries[crossIndex];\n                    if (cross === undefined) {\n                      throw new Error('oob');\n                    }\n                    var crossLength = cross.length;\n                    var newBitmap = _WordDB__WEBPACK_IMPORTED_MODULE_2__.updateBitmap(crossLength, cross.bitmap, crossObj.wordIndex, candidateLetter);\n                    if (_bitArray__WEBPACK_IMPORTED_MODULE_3__.isZero(newBitmap)) {\n                      failingLetters[i] += word[_j];\n                      failFast = true;\n                      break;\n                    }\n                    var _newCost = baseCost - cross.minCost + _WordDB__WEBPACK_IMPORTED_MODULE_2__.minCost(crossLength, newBitmap);\n                    if (costToBeat !== null && _newCost > costToBeat) {\n                      failingLetters[i] += word[_j];\n                      failFast = true;\n                      break;\n                    }\n                    succeedingLetters[i] += word[_j];\n                  }\n                } catch (err) {\n                  _iterator4.e(err);\n                } finally {\n                  _iterator4.f();\n                }\n              }\n              if (failFast) {\n                continue;\n              }\n              var newgrid = (0,_autofillGrid__WEBPACK_IMPORTED_MODULE_1__.gridWithEntryDecided)(grid, entry.index, word, cost);\n              if (newgrid === null) {\n                continue;\n              }\n              var newCost = (0,_autofillGrid__WEBPACK_IMPORTED_MODULE_1__.minGridCost)(newgrid);\n\n              // Check overall score\n              if (costToBeat && newCost > costToBeat) {\n                continue;\n              }\n              if (bestGrid === null || bestCost === null) {\n                bestGrid = [newgrid, entry.index, word];\n                bestCost = newCost;\n              } else if (newCost < bestCost) {\n                bestGrid = [newgrid, entry.index, word];\n                secondBestCost = bestCost;\n                bestCost = newCost;\n              } else if (secondBestCost === null || newCost < secondBestCost) {\n                secondBestCost = newCost;\n                if (successorDiff && secondBestCost - baseCost < successorDiff) {\n                  skipEntry = true;\n                  break;\n                }\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n          if (skipEntry) {\n            return \"break\";\n          }\n          if (bestGrid === null || bestCost === null) {\n            // No valid option for this entry, bad grid\n            return {\n              v: cont(null)\n            };\n          }\n          if (secondBestCost === null) {\n            // No backup option, so this entry is forced\n            successor = bestGrid;\n            return \"break\";\n          }\n          var costDiff = secondBestCost - bestCost;\n          if (successorDiff === null || costDiff > successorDiff) {\n            // No successor or this one has higher cost differential\n            successor = bestGrid;\n            successorDiff = costDiff;\n          }\n        };\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _ret = _loop();\n          if (_ret === \"break\") break;\n          if (_typeof(_ret) === \"object\") return _ret.v;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      if (successor === null) {\n        throw new Error('successor was null');\n      }\n      var suc = successor; // weird hack around type system not realizing successor isn't null\n      var nextSubset = null;\n      if (subset !== null) {\n        nextSubset = new Set(Array.from(subset).filter(function (e) {\n          return e !== suc[1];\n        }));\n      }\n      if (!discrep || pitched.size >= discrep) {\n        return recur(successor[0], discrep, pitched, nextSubset, cont);\n      }\n      return recur(successor[0], discrep, pitched, nextSubset, function (result) {\n        var newPitched = new Set(pitched.values());\n        newPitched.add(suc[1] + ':' + suc[2]);\n        return recur(grid, discrep, newPitched, subset, function (res2) {\n          return cont(res2 !== null && (result === null || (0,_autofillGrid__WEBPACK_IMPORTED_MODULE_1__.minGridCost)(res2) < (0,_autofillGrid__WEBPACK_IMPORTED_MODULE_1__.minGridCost)(result)) ? res2 : result);\n        });\n      });\n    }\n  }]);\n  return Autofiller;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/Autofiller.ts\n");

/***/ }),

/***/ "./lib/WordDB.ts":
/*!***********************!*\
  !*** ./lib/WordDB.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   build: () => (/* binding */ build),\n/* harmony export */   matchingBitmap: () => (/* binding */ matchingBitmap),\n/* harmony export */   matchingWords: () => (/* binding */ matchingWords),\n/* harmony export */   minCost: () => (/* binding */ minCost),\n/* harmony export */   numMatches: () => (/* binding */ numMatches),\n/* harmony export */   rawBuild: () => (/* binding */ rawBuild),\n/* harmony export */   scoreToCost: () => (/* binding */ scoreToCost),\n/* harmony export */   setDb: () => (/* binding */ setDb),\n/* harmony export */   updateBitmap: () => (/* binding */ updateBitmap),\n/* harmony export */   useWordDB: () => (/* binding */ useWordDB),\n/* harmony export */   validateAndSet: () => (/* binding */ validateAndSet),\n/* harmony export */   wordDB: () => (/* binding */ wordDB)\n/* harmony export */ });\n/* harmony import */ var io_ts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! io-ts */ \"../node_modules/io-ts/es6/index.js\");\n/* harmony import */ var fp_ts_lib_Either__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! fp-ts/lib/Either */ \"../node_modules/fp-ts/lib/Either.js\");\n/* harmony import */ var fp_ts_lib_Either__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(fp_ts_lib_Either__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var io_ts_lib_PathReporter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! io-ts/lib/PathReporter */ \"../node_modules/io-ts/lib/PathReporter.js\");\n/* harmony import */ var idb_keyval__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! idb-keyval */ \"../node_modules/idb-keyval/dist/index.js\");\n/* harmony import */ var _bitArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bitArray */ \"./lib/bitArray.ts\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"../node_modules/react/index.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, \"_invoke\", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, \"_invoke\", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, \"catch\": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\nvar WordDBV = io_ts__WEBPACK_IMPORTED_MODULE_2__.type({\n  words: io_ts__WEBPACK_IMPORTED_MODULE_2__.record(io_ts__WEBPACK_IMPORTED_MODULE_2__.string, io_ts__WEBPACK_IMPORTED_MODULE_2__.array(io_ts__WEBPACK_IMPORTED_MODULE_2__.tuple([io_ts__WEBPACK_IMPORTED_MODULE_2__.string, io_ts__WEBPACK_IMPORTED_MODULE_2__.number]))),\n  bitmaps: io_ts__WEBPACK_IMPORTED_MODULE_2__.record(io_ts__WEBPACK_IMPORTED_MODULE_2__.string, io_ts__WEBPACK_IMPORTED_MODULE_2__.array(io_ts__WEBPACK_IMPORTED_MODULE_2__.number))\n});\nvar DBStatus = /*#__PURE__*/function (DBStatus) {\n  DBStatus[DBStatus[\"uninitialized\"] = 0] = \"uninitialized\";\n  DBStatus[DBStatus[\"building\"] = 1] = \"building\";\n  DBStatus[DBStatus[\"notPresent\"] = 2] = \"notPresent\";\n  DBStatus[DBStatus[\"present\"] = 3] = \"present\";\n  return DBStatus;\n}(DBStatus || {});\nvar wordDB = undefined;\nvar dbStatus = DBStatus.uninitialized;\nvar STORAGE_KEY = 'db';\nvar VERSION_KEY = 'db_version';\nvar VERSION = '2';\nvar useWordDB = function useWordDB(validate) {\n  var _useState = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    present = _useState2[0],\n    setPresent = _useState2[1];\n  var _useState3 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    error = _useState4[0],\n    setError = _useState4[1];\n  var _useState5 = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true),\n    _useState6 = _slicedToArray(_useState5, 2),\n    loading = _useState6[0],\n    setLoading = _useState6[1];\n  function setLoaded() {\n    setPresent(true);\n    setError('');\n    setLoading(false);\n  }\n  (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(function () {\n    var didCancel = false;\n    var fetchData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!(dbStatus === DBStatus.present)) {\n                _context.next = 6;\n                break;\n              }\n              setPresent(true);\n              setLoading(false);\n              return _context.abrupt(\"return\");\n            case 6:\n              if (!(dbStatus === DBStatus.notPresent)) {\n                _context.next = 9;\n                break;\n              }\n              setLoading(false);\n              return _context.abrupt(\"return\");\n            case 9:\n              dbStatus = DBStatus.building;\n              console.log('checking db version');\n              if (!(localStorage.getItem(VERSION_KEY) !== VERSION)) {\n                _context.next = 16;\n                break;\n              }\n              console.log('version missing or out of date');\n              dbStatus = DBStatus.notPresent;\n              setLoading(false);\n              return _context.abrupt(\"return\");\n            case 16:\n              console.log('trying to load from idb');\n              return _context.abrupt(\"return\", (0,idb_keyval__WEBPACK_IMPORTED_MODULE_3__.get)(STORAGE_KEY).then(function (db) {\n                if (didCancel) {\n                  return;\n                }\n                // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions\n                if (db) {\n                  console.log('loaded');\n                  if (validate) {\n                    var validationResult = WordDBV.decode(db);\n                    if ((0,fp_ts_lib_Either__WEBPACK_IMPORTED_MODULE_4__.isRight)(validationResult)) {\n                      console.log('validated');\n                      wordDB = validationResult.right;\n                      dbStatus = DBStatus.present;\n                      setPresent(true);\n                    } else {\n                      setError('could not validate');\n                      console.error(io_ts_lib_PathReporter__WEBPACK_IMPORTED_MODULE_5__.PathReporter.report(validationResult).join(','));\n                    }\n                  } else {\n                    wordDB = db;\n                    dbStatus = DBStatus.present;\n                    setPresent(true);\n                  }\n                } else {\n                  console.log('failed to load');\n                  dbStatus = DBStatus.notPresent;\n                }\n                setLoading(false);\n              }));\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function fetchData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    fetchData();\n    return function () {\n      didCancel = true;\n    };\n  }, [validate]);\n  return [present, error, loading, setLoaded];\n};\nvar rawBuild = function rawBuild(wordlist) {\n  var words = wordlist.sort(function (s1, s2) {\n    return s1[1] - s2[1] || s2[0].localeCompare(s1[0]);\n  });\n  console.log('building words by length');\n  var wordsByLength = words.reduce(function (acc, _ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n      word = _ref3[0],\n      score = _ref3[1];\n    var wfl = acc[word.length];\n    if (wfl) {\n      wfl.push([word, score]);\n    } else {\n      acc[word.length] = [[word, score]];\n    }\n    return acc;\n  }, {});\n  var bitmaps = {};\n  console.log('building bitmaps');\n  Object.keys(wordsByLength).map(function (lengthStr) {\n    var length = parseInt(lengthStr);\n    var wordlist = wordsByLength[length];\n    if (wordlist === undefined) {\n      throw new Error('oob');\n    }\n    var _loop = function _loop() {\n      var letter = String.fromCharCode(65 + i);\n      var _loop2 = function _loop2(idx) {\n        var bitmap = _bitArray__WEBPACK_IMPORTED_MODULE_0__.zero();\n        wordlist.forEach(function (word, wordIdx) {\n          if (word[0][idx] === letter) {\n            _bitArray__WEBPACK_IMPORTED_MODULE_0__.setBit(bitmap, wordIdx);\n          }\n        });\n        bitmaps[lengthStr + letter + idx.toString()] = bitmap;\n      };\n      for (var idx = 0; idx < length; idx += 1) {\n        _loop2(idx);\n      }\n    };\n    for (var i = 0; i < 26; i += 1) {\n      _loop();\n    }\n  });\n  return {\n    words: wordsByLength,\n    bitmaps: bitmaps\n  };\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nvar validateAndSet = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(dled) {\n    var validationResult;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          validationResult = WordDBV.decode(dled);\n          if (!(0,fp_ts_lib_Either__WEBPACK_IMPORTED_MODULE_4__.isRight)(validationResult)) {\n            _context2.next = 10;\n            break;\n          }\n          console.log('validated');\n          wordDB = validationResult.right;\n          _context2.next = 6;\n          return (0,idb_keyval__WEBPACK_IMPORTED_MODULE_3__.set)(STORAGE_KEY, wordDB);\n        case 6:\n          localStorage.setItem(VERSION_KEY, VERSION);\n          dbStatus = DBStatus.present;\n          _context2.next = 12;\n          break;\n        case 10:\n          console.error(io_ts_lib_PathReporter__WEBPACK_IMPORTED_MODULE_5__.PathReporter.report(validationResult).join(','));\n          throw new Error('failed to validate');\n        case 12:\n          console.log('done');\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return function validateAndSet(_x2) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nvar build = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(wordlist) {\n    var wordLines, words;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          console.log('building db');\n          dbStatus = DBStatus.building;\n          wordLines = wordlist.match(/[^\\r\\n]+/g);\n          if (wordLines) {\n            _context3.next = 5;\n            break;\n          }\n          throw new Error('malformed wordlist');\n        case 5:\n          words = wordLines.map(function (s) {\n            return s.toUpperCase().split(';');\n          })\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-expect-error\n          .filter(function (s) {\n            return !/[^A-Z]/.test(s[0]);\n          }) /* Filter any words w/ non-letters */\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-expect-error\n          .map(function (s) {\n            return [s[0], parseInt(s[1])];\n          });\n          wordDB = rawBuild(words);\n          console.log('built, updating local storage');\n          _context3.prev = 8;\n          _context3.next = 11;\n          return (0,idb_keyval__WEBPACK_IMPORTED_MODULE_3__.set)(STORAGE_KEY, wordDB);\n        case 11:\n          _context3.next = 16;\n          break;\n        case 13:\n          _context3.prev = 13;\n          _context3.t0 = _context3[\"catch\"](8);\n          console.error('Could not write to indexeddb!');\n        case 16:\n          dbStatus = DBStatus.present;\n          console.log('done');\n        case 18:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3, null, [[8, 13]]);\n  }));\n  return function build(_x3) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nfunction setDb(newdb) {\n  wordDB = newdb;\n}\nvar ZERO = _bitArray__WEBPACK_IMPORTED_MODULE_0__.zero();\nfunction highestScore(length, bitmap) {\n  if (!wordDB) {\n    throw new Error('uninitialized!');\n  }\n  var words = wordDB.words[length];\n  if (!words) {\n    return null;\n  }\n  if (bitmap === null) {\n    return words[words.length - 1];\n  }\n  return words[_bitArray__WEBPACK_IMPORTED_MODULE_0__.bitLength(bitmap) - 1];\n}\nfunction scoreToCost(score) {\n  if (score === 0) {\n    return 10;\n  } else if (score === 1) {\n    return 1;\n  } else if (score === 2) {\n    return 0.1;\n  } else if (score === 3) {\n    return 0.01;\n  } else {\n    throw new Error('bad score! ' + score.toString());\n  }\n}\n\n/**\r\n * Get minimum cost of the words encoded by `bitmap`.\r\n */\nfunction minCost(length, bitmap) {\n  var match = highestScore(length, bitmap);\n  if (match) {\n    return scoreToCost(match[1]);\n  }\n  return 5;\n}\nfunction numMatches(length, bitmap) {\n  if (!wordDB) {\n    throw new Error('uninitialized!');\n  }\n  if (bitmap === null) {\n    var _wordDB$words$length;\n    return ((_wordDB$words$length = wordDB.words[length]) === null || _wordDB$words$length === void 0 ? void 0 : _wordDB$words$length.length) || 0;\n  }\n  return _bitArray__WEBPACK_IMPORTED_MODULE_0__.bitCount(bitmap);\n}\nfunction updateBitmap(length, bitmap, index, letter) {\n  if (!wordDB) {\n    throw new Error('uninitialized!');\n  }\n  var match = wordDB.bitmaps[length + letter + index] || ZERO;\n  if (bitmap === null) {\n    return match;\n  }\n  return _bitArray__WEBPACK_IMPORTED_MODULE_0__.and(bitmap, match);\n}\nvar memoMatchingWords = new Map();\nfunction matchingWords(length, bitmap) {\n  var key = length + ':' + (bitmap === null ? 'null' : _bitArray__WEBPACK_IMPORTED_MODULE_0__.toString(bitmap, 64));\n  var memoed = memoMatchingWords.get(key);\n  if (memoed) {\n    return memoed;\n  }\n  if (!wordDB) {\n    throw new Error('uninitialized!');\n  }\n  var rv;\n  if (bitmap === null) {\n    rv = (wordDB.words[length] || []).slice().reverse();\n  } else {\n    var active = _bitArray__WEBPACK_IMPORTED_MODULE_0__.activeBits(bitmap);\n    rv = [];\n    var _iterator = _createForOfIteratorHelper(active),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _wordDB$words$length2;\n        var i = _step.value;\n        var word = (_wordDB$words$length2 = wordDB.words[length]) === null || _wordDB$words$length2 === void 0 ? void 0 : _wordDB$words$length2[i];\n        if (word === undefined) {\n          continue;\n        }\n        rv.push(word);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  memoMatchingWords.set(key, rv);\n  return rv;\n}\nvar memoMatchingBitmap = new Map();\nfunction matchingBitmap(pattern) {\n  var memoed = memoMatchingBitmap.get(pattern);\n  if (memoed) {\n    return memoed;\n  }\n  if (!wordDB) {\n    throw new Error('uninitialized!');\n  }\n  var matches = null;\n  for (var idx = 0; idx < pattern.length; idx += 1) {\n    var letter = pattern[idx];\n    if (letter === undefined) {\n      throw new Error('oob');\n    }\n    if (letter === '?' || letter === ' ') {\n      continue;\n    }\n    var bitmap = wordDB.bitmaps[pattern.length + letter + idx] || ZERO;\n    if (matches === null) {\n      matches = _toConsumableArray(bitmap);\n    } else {\n      _bitArray__WEBPACK_IMPORTED_MODULE_0__.inPlaceAnd(matches, bitmap);\n    }\n  }\n  memoMatchingBitmap.set(pattern, matches);\n  return matches;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/WordDB.ts\n");

/***/ }),

/***/ "./lib/autofill.worker.ts":
/*!********************************!*\
  !*** ./lib/autofill.worker.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ \"./lib/types.ts\");\n/* harmony import */ var _Autofiller__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Autofiller */ \"./lib/Autofiller.ts\");\n/* harmony import */ var _WordDB__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./WordDB */ \"./lib/WordDB.ts\");\n\n\n\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nvar ctx = self;\nvar msgChannel = new MessageChannel();\nvar current;\nmsgChannel.port2.onmessage = function (_e) {\n  if (current === null || current.completed) {\n    return;\n  }\n  current.step();\n  msgChannel.port1.postMessage('');\n};\nfunction onResult(input, result) {\n  var soln = {\n    input: input,\n    result: result,\n    type: 'autofill-result'\n  };\n  ctx.postMessage(soln);\n}\nfunction onComplete() {\n  var soln = {\n    type: 'autofill-complete'\n  };\n  ctx.postMessage(soln);\n}\nctx.onmessage = function (e) {\n  var data = e.data;\n  if ((0,_types__WEBPACK_IMPORTED_MODULE_0__.isLoadDBMessage)(data)) {\n    (0,_WordDB__WEBPACK_IMPORTED_MODULE_2__.setDb)(data.db);\n  } else if ((0,_types__WEBPACK_IMPORTED_MODULE_0__.isAutofillMessage)(data)) {\n    var shouldError = true;\n    for (var i = 0; i < 25; i += 1) {\n      if (i >= data.grid.length) {\n        shouldError = false;\n        break;\n      }\n      if (data.grid[i] !== 'ERROR'[i % 5]) {\n        shouldError = false;\n        break;\n      }\n    }\n    if (shouldError) {\n      throw new Error('Autofill error test');\n    }\n    current = new _Autofiller__WEBPACK_IMPORTED_MODULE_1__.Autofiller(data.grid, data.width, data.height,\n    // data.vBars,\n    // data.hBars,\n    onResult, onComplete);\n    msgChannel.port1.postMessage('');\n  } else if ((0,_types__WEBPACK_IMPORTED_MODULE_0__.isCancelAutofillMessage)(data)) {\n    current = null;\n  } else {\n    console.error('unhandled msg in autofill worker: ' + e.data);\n  }\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (null);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9saWIvYXV0b2ZpbGwud29ya2VyLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFPaUI7QUFDeUI7QUFDVDs7QUFFakM7QUFDQSxJQUFNSyxHQUFXLEdBQUdDLElBQVc7QUFFL0IsSUFBTUMsVUFBVSxHQUFHLElBQUlDLGNBQWMsQ0FBQyxDQUFDO0FBQ3ZDLElBQUlDLE9BQTBCO0FBRTlCRixVQUFVLENBQUNHLEtBQUssQ0FBQ0MsU0FBUyxHQUFHLFVBQUNDLEVBQUUsRUFBSztFQUNuQyxJQUFJSCxPQUFPLEtBQUssSUFBSSxJQUFJQSxPQUFPLENBQUNJLFNBQVMsRUFBRTtJQUN6QztFQUNGO0VBQ0FKLE9BQU8sQ0FBQ0ssSUFBSSxDQUFDLENBQUM7RUFDZFAsVUFBVSxDQUFDUSxLQUFLLENBQUNDLFdBQVcsQ0FBQyxFQUFFLENBQUM7QUFDbEMsQ0FBQztBQUVELFNBQVNDLFFBQVFBLENBQ2ZDLEtBQStDLEVBQy9DQyxNQUFnQixFQUNoQjtFQUNBLElBQU1DLElBQTJCLEdBQUc7SUFDbENGLEtBQUssRUFBTEEsS0FBSztJQUNMQyxNQUFNLEVBQU5BLE1BQU07SUFDTkUsSUFBSSxFQUFFO0VBQ1IsQ0FBQztFQUNEaEIsR0FBRyxDQUFDVyxXQUFXLENBQUNJLElBQUksQ0FBQztBQUN2QjtBQUVBLFNBQVNFLFVBQVVBLENBQUEsRUFBRztFQUNwQixJQUFNRixJQUE2QixHQUFHO0lBQUVDLElBQUksRUFBRTtFQUFvQixDQUFDO0VBQ25FaEIsR0FBRyxDQUFDVyxXQUFXLENBQUNJLElBQUksQ0FBQztBQUN2QjtBQUVBZixHQUFHLENBQUNNLFNBQVMsR0FBRyxVQUFDWSxDQUFDLEVBQUs7RUFDckIsSUFBTUMsSUFBSSxHQUFHRCxDQUFDLENBQUNDLElBQXFCO0VBQ3BDLElBQUl4Qix1REFBZSxDQUFDd0IsSUFBSSxDQUFDLEVBQUU7SUFDekJwQiw4Q0FBSyxDQUFDb0IsSUFBSSxDQUFDQyxFQUFFLENBQUM7RUFDaEIsQ0FBQyxNQUFNLElBQUl4Qix5REFBaUIsQ0FBQ3VCLElBQUksQ0FBQyxFQUFFO0lBQ2xDLElBQUlFLFdBQVcsR0FBRyxJQUFJO0lBQ3RCLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHLEVBQUUsRUFBRUEsQ0FBQyxJQUFJLENBQUMsRUFBRTtNQUM5QixJQUFJQSxDQUFDLElBQUlILElBQUksQ0FBQ0ksSUFBSSxDQUFDQyxNQUFNLEVBQUU7UUFDekJILFdBQVcsR0FBRyxLQUFLO1FBQ25CO01BQ0Y7TUFDQSxJQUFJRixJQUFJLENBQUNJLElBQUksQ0FBQ0QsQ0FBQyxDQUFDLEtBQUssT0FBTyxDQUFDQSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7UUFDbkNELFdBQVcsR0FBRyxLQUFLO1FBQ25CO01BQ0Y7SUFDRjtJQUNBLElBQUlBLFdBQVcsRUFBRTtNQUNmLE1BQU0sSUFBSUksS0FBSyxDQUFDLHFCQUFxQixDQUFDO0lBQ3hDO0lBRUFyQixPQUFPLEdBQUcsSUFBSU4sbURBQVUsQ0FDdEJxQixJQUFJLENBQUNJLElBQUksRUFDVEosSUFBSSxDQUFDTyxLQUFLLEVBQ1ZQLElBQUksQ0FBQ1EsTUFBTTtJQUNYO0lBQ0E7SUFDQWYsUUFBUSxFQUNSSyxVQUNGLENBQUM7SUFDRGYsVUFBVSxDQUFDUSxLQUFLLENBQUNDLFdBQVcsQ0FBQyxFQUFFLENBQUM7RUFDbEMsQ0FBQyxNQUFNLElBQUlkLCtEQUF1QixDQUFDc0IsSUFBSSxDQUFDLEVBQUU7SUFDeENmLE9BQU8sR0FBRyxJQUFJO0VBQ2hCLENBQUMsTUFBTTtJQUNMd0IsT0FBTyxDQUFDQyxLQUFLLENBQUMsb0NBQW9DLEdBQUdYLENBQUMsQ0FBQ0MsSUFBSSxDQUFDO0VBQzlEO0FBQ0YsQ0FBQzs7QUFFRDtBQUNBLGlFQUFlLElBQUkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93ZWJhcHBsaWNhdGlvbjEvLi9saWIvYXV0b2ZpbGwud29ya2VyLnRzPzE2ZTgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBBdXRvZmlsbFJlc3VsdE1lc3NhZ2UsXHJcbiAgQXV0b2ZpbGxDb21wbGV0ZU1lc3NhZ2UsXHJcbiAgV29ya2VyTWVzc2FnZSxcclxuICBpc0xvYWREQk1lc3NhZ2UsXHJcbiAgaXNBdXRvZmlsbE1lc3NhZ2UsXHJcbiAgaXNDYW5jZWxBdXRvZmlsbE1lc3NhZ2UsXHJcbn0gZnJvbSAnLi90eXBlcyc7XHJcbmltcG9ydCB7IEF1dG9maWxsZXIgfSBmcm9tICcuL0F1dG9maWxsZXInO1xyXG5pbXBvcnQgeyBzZXREYiB9IGZyb20gJy4vV29yZERCJztcclxuXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbmNvbnN0IGN0eDogV29ya2VyID0gc2VsZiBhcyBhbnk7XHJcblxyXG5jb25zdCBtc2dDaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XHJcbmxldCBjdXJyZW50OiBBdXRvZmlsbGVyIHwgbnVsbDtcclxuXHJcbm1zZ0NoYW5uZWwucG9ydDIub25tZXNzYWdlID0gKF9lKSA9PiB7XHJcbiAgaWYgKGN1cnJlbnQgPT09IG51bGwgfHwgY3VycmVudC5jb21wbGV0ZWQpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgY3VycmVudC5zdGVwKCk7XHJcbiAgbXNnQ2hhbm5lbC5wb3J0MS5wb3N0TWVzc2FnZSgnJyk7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBvblJlc3VsdChcclxuICBpbnB1dDogW3N0cmluZ1tdLCAvKlNldDxudW1iZXI+LCBTZXQ8bnVtYmVyPiovXSxcclxuICByZXN1bHQ6IHN0cmluZ1tdXHJcbikge1xyXG4gIGNvbnN0IHNvbG46IEF1dG9maWxsUmVzdWx0TWVzc2FnZSA9IHtcclxuICAgIGlucHV0LFxyXG4gICAgcmVzdWx0LFxyXG4gICAgdHlwZTogJ2F1dG9maWxsLXJlc3VsdCcsXHJcbiAgfTtcclxuICBjdHgucG9zdE1lc3NhZ2Uoc29sbik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG9uQ29tcGxldGUoKSB7XHJcbiAgY29uc3Qgc29sbjogQXV0b2ZpbGxDb21wbGV0ZU1lc3NhZ2UgPSB7IHR5cGU6ICdhdXRvZmlsbC1jb21wbGV0ZScgfTtcclxuICBjdHgucG9zdE1lc3NhZ2Uoc29sbik7XHJcbn1cclxuXHJcbmN0eC5vbm1lc3NhZ2UgPSAoZSkgPT4ge1xyXG4gIGNvbnN0IGRhdGEgPSBlLmRhdGEgYXMgV29ya2VyTWVzc2FnZTtcclxuICBpZiAoaXNMb2FkREJNZXNzYWdlKGRhdGEpKSB7XHJcbiAgICBzZXREYihkYXRhLmRiKTtcclxuICB9IGVsc2UgaWYgKGlzQXV0b2ZpbGxNZXNzYWdlKGRhdGEpKSB7XHJcbiAgICBsZXQgc2hvdWxkRXJyb3IgPSB0cnVlO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCAyNTsgaSArPSAxKSB7XHJcbiAgICAgIGlmIChpID49IGRhdGEuZ3JpZC5sZW5ndGgpIHtcclxuICAgICAgICBzaG91bGRFcnJvciA9IGZhbHNlO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChkYXRhLmdyaWRbaV0gIT09ICdFUlJPUidbaSAlIDVdKSB7XHJcbiAgICAgICAgc2hvdWxkRXJyb3IgPSBmYWxzZTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKHNob3VsZEVycm9yKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignQXV0b2ZpbGwgZXJyb3IgdGVzdCcpO1xyXG4gICAgfVxyXG5cclxuICAgIGN1cnJlbnQgPSBuZXcgQXV0b2ZpbGxlcihcclxuICAgICAgZGF0YS5ncmlkLFxyXG4gICAgICBkYXRhLndpZHRoLFxyXG4gICAgICBkYXRhLmhlaWdodCxcclxuICAgICAgLy8gZGF0YS52QmFycyxcclxuICAgICAgLy8gZGF0YS5oQmFycyxcclxuICAgICAgb25SZXN1bHQsXHJcbiAgICAgIG9uQ29tcGxldGVcclxuICAgICk7XHJcbiAgICBtc2dDaGFubmVsLnBvcnQxLnBvc3RNZXNzYWdlKCcnKTtcclxuICB9IGVsc2UgaWYgKGlzQ2FuY2VsQXV0b2ZpbGxNZXNzYWdlKGRhdGEpKSB7XHJcbiAgICBjdXJyZW50ID0gbnVsbDtcclxuICB9IGVsc2Uge1xyXG4gICAgY29uc29sZS5lcnJvcigndW5oYW5kbGVkIG1zZyBpbiBhdXRvZmlsbCB3b3JrZXI6ICcgKyBlLmRhdGEpO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbmV4cG9ydCBkZWZhdWx0IG51bGwgYXMgYW55O1xyXG4iXSwibmFtZXMiOlsiaXNMb2FkREJNZXNzYWdlIiwiaXNBdXRvZmlsbE1lc3NhZ2UiLCJpc0NhbmNlbEF1dG9maWxsTWVzc2FnZSIsIkF1dG9maWxsZXIiLCJzZXREYiIsImN0eCIsInNlbGYiLCJtc2dDaGFubmVsIiwiTWVzc2FnZUNoYW5uZWwiLCJjdXJyZW50IiwicG9ydDIiLCJvbm1lc3NhZ2UiLCJfZSIsImNvbXBsZXRlZCIsInN0ZXAiLCJwb3J0MSIsInBvc3RNZXNzYWdlIiwib25SZXN1bHQiLCJpbnB1dCIsInJlc3VsdCIsInNvbG4iLCJ0eXBlIiwib25Db21wbGV0ZSIsImUiLCJkYXRhIiwiZGIiLCJzaG91bGRFcnJvciIsImkiLCJncmlkIiwibGVuZ3RoIiwiRXJyb3IiLCJ3aWR0aCIsImhlaWdodCIsImNvbnNvbGUiLCJlcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./lib/autofill.worker.ts\n");

/***/ }),

/***/ "./lib/autofillGrid.ts":
/*!*****************************!*\
  !*** ./lib/autofillGrid.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addAutofillFieldsToEntry: () => (/* binding */ addAutofillFieldsToEntry),\n/* harmony export */   fromTemplate: () => (/* binding */ fromTemplate),\n/* harmony export */   gridWithEntryDecided: () => (/* binding */ gridWithEntryDecided),\n/* harmony export */   minGridCost: () => (/* binding */ minGridCost),\n/* harmony export */   numMatchesForEntry: () => (/* binding */ numMatchesForEntry),\n/* harmony export */   stableSubsets: () => (/* binding */ stableSubsets)\n/* harmony export */ });\n/* harmony import */ var _bitArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bitArray */ \"./lib/bitArray.ts\");\n/* harmony import */ var _gridBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gridBase */ \"./lib/gridBase.ts\");\n/* harmony import */ var _WordDB__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./WordDB */ \"./lib/WordDB.ts\");\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\n\n\n/* Get a lower bound on total cost of the grid as filled in. */\nfunction minGridCost(grid) {\n  var cost = 0;\n  grid.entries.forEach(function (e) {\n    return cost += e.minCost;\n  });\n  return cost;\n}\nfunction numMatchesForEntry(entry) {\n  return (0,_WordDB__WEBPACK_IMPORTED_MODULE_2__.numMatches)(entry.length, entry.bitmap);\n}\n\n/*\r\n * Get a new grid with an entry filled out.\r\n *\r\n * This is for autofilling purposes, so the values in the new fill cannot\r\n * conflict with anything existing in the grid.\r\n */\nfunction gridWithEntryDecided(grid, entryIndex, word, cost) {\n  var newGrid = _objectSpread(_objectSpread({}, grid), {}, {\n    usedWords: new Set(grid.usedWords),\n    cells: grid.cells.slice(),\n    entries: grid.entries.slice()\n  });\n  var entry = newGrid.entries[entryIndex];\n  if (entry === undefined) {\n    throw new Error('oob');\n  }\n  newGrid.usedWords.add(word);\n  var crosses = (0,_gridBase__WEBPACK_IMPORTED_MODULE_1__.getCrosses)(newGrid, entry);\n  var j = -1;\n  var _loop = function _loop(_i) {\n    j += 1;\n    var cellPos = entry.cells[j];\n    if (cellPos === undefined) {\n      throw new Error('oob');\n    }\n    var currentVal = (0,_gridBase__WEBPACK_IMPORTED_MODULE_1__.valAt)(newGrid, cellPos);\n    if (currentVal !== ' ') {\n      if (currentVal === word.slice(_i, _i + currentVal.length)) {\n        // No change needed for this cell\n        _i = _i + currentVal.length - 1;\n        i = _i;\n        return \"continue\";\n      } else {\n        throw new Error('Cell has conflicting value: ' + currentVal + ',' + word + ',' + _i);\n      }\n    }\n    var letter = word[_i];\n    if (letter === undefined) {\n      throw new Error('oob');\n    }\n\n    // update cells\n    (0,_gridBase__WEBPACK_IMPORTED_MODULE_1__.setVal)(newGrid, cellPos, letter);\n\n    // update crossing entry\n    var crossObj = crosses[j];\n    if (crossObj === undefined) {\n      throw new Error('oob');\n    }\n    var crossIndex = crossObj.entryIndex;\n    if (crossIndex === null) {\n      i = _i;\n      return \"continue\";\n    }\n    var cross = newGrid.entries[crossIndex];\n    if (cross === undefined) {\n      throw new Error('oob');\n    }\n    var crossWord = '';\n    cross.cells.forEach(function (cid) {\n      crossWord += (0,_gridBase__WEBPACK_IMPORTED_MODULE_1__.valAt)(newGrid, cid);\n    });\n    var crossBitmap = (0,_WordDB__WEBPACK_IMPORTED_MODULE_2__.updateBitmap)(cross.length, cross.bitmap, crossObj.wordIndex, letter);\n    if (_bitArray__WEBPACK_IMPORTED_MODULE_0__.isZero(crossBitmap)) {\n      // empty bitmap means invalid grid\n      return {\n        v: null\n      };\n    }\n    if (crossWord.indexOf(' ') === -1) {\n      newGrid.usedWords.add(crossWord);\n    } else {\n      crossWord = null;\n    }\n    newGrid.entries[crossIndex] = _objectSpread(_objectSpread({}, cross), {}, {\n      bitmap: crossBitmap,\n      completedWord: crossWord,\n      minCost: (0,_WordDB__WEBPACK_IMPORTED_MODULE_2__.minCost)(cross.length, crossBitmap)\n    });\n    i = _i;\n  };\n  for (var i = 0; i < word.length; i += 1) {\n    var _ret = _loop(i);\n    if (_ret === \"continue\") continue;\n    if (_typeof(_ret) === \"object\") return _ret.v;\n  }\n\n  // update entry itself\n  newGrid.entries[entryIndex] = _objectSpread(_objectSpread({}, entry), {}, {\n    bitmap: null,\n    completedWord: word,\n    minCost: cost\n  });\n  return newGrid;\n}\nfunction stableSubsets(grid, prelimSubset) {\n  var openEntries = grid.entries.filter(function (e) {\n    return !e.completedWord;\n  });\n  if (prelimSubset !== null) {\n    openEntries = openEntries.filter(function (e) {\n      return prelimSubset.has(e.index);\n    });\n  }\n  var assignments = new Map();\n  function addSubset(entry, num) {\n    if (assignments.has(entry.index)) {\n      return;\n    }\n    if (prelimSubset !== null && !prelimSubset.has(entry.index)) {\n      throw new Error('Bad assignment ' + entry.index + ':' + prelimSubset);\n    }\n    assignments.set(entry.index, num);\n    (0,_gridBase__WEBPACK_IMPORTED_MODULE_1__.getCrosses)(grid, entry).forEach(function (c) {\n      if (c.entryIndex === null) {\n        return;\n      }\n      var cross = grid.entries[c.entryIndex];\n      if (cross === undefined) {\n        throw new Error('oob');\n      }\n      var cellPos = cross.cells[c.cellIndex];\n      if (cellPos === undefined) {\n        throw new Error('oob');\n      }\n      if ((0,_gridBase__WEBPACK_IMPORTED_MODULE_1__.valAt)(grid, cellPos) === ' ') {\n        addSubset(cross, num);\n      }\n    });\n  }\n  var subsetNumber = 0;\n  openEntries.forEach(function (e) {\n    addSubset(e, subsetNumber);\n    subsetNumber += 1;\n  });\n  var inv = new Map();\n  assignments.forEach(function (val, key) {\n    var newVal = inv.get(val) || new Set();\n    newVal.add(key);\n    inv.set(val, newVal);\n  });\n  return Array.from(inv.values());\n}\nfunction addAutofillFieldsToEntry(baseEntry) {\n  var entryBitmap = (0,_WordDB__WEBPACK_IMPORTED_MODULE_2__.matchingBitmap)(baseEntry.pattern);\n  return _objectSpread(_objectSpread({}, baseEntry), {}, {\n    length: baseEntry.pattern.length,\n    bitmap: entryBitmap,\n    minCost: (0,_WordDB__WEBPACK_IMPORTED_MODULE_2__.minCost)(baseEntry.pattern.length, entryBitmap)\n  });\n}\nfunction fromTemplate(template, width, height\n// vBars: Set<number>,\n// hBars: Set<number>\n) {\n  var cells = template.map(function (c) {\n    return c.toUpperCase().replace('#', '.');\n  });\n  var usedWords = new Set();\n  var _entriesFromCells = (0,_gridBase__WEBPACK_IMPORTED_MODULE_1__.entriesFromCells)(width, height, cells\n    // vBars,\n    // hBars\n    ),\n    _entriesFromCells2 = _slicedToArray(_entriesFromCells, 2),\n    baseEntries = _entriesFromCells2[0],\n    entriesByCell = _entriesFromCells2[1];\n  var entries = baseEntries.map(function (baseEntry) {\n    if (baseEntry.completedWord) {\n      usedWords.add(baseEntry.completedWord);\n    }\n    return addAutofillFieldsToEntry(baseEntry);\n  });\n  return {\n    width: width,\n    height: height,\n    usedWords: usedWords,\n    cells: cells,\n    entriesByCell: entriesByCell,\n    entries: entries\n    // vBars,\n    // hBars,\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/autofillGrid.ts\n");

/***/ }),

/***/ "./lib/bitArray.ts":
/*!*************************!*\
  !*** ./lib/bitArray.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   activeBits: () => (/* binding */ activeBits),\n/* harmony export */   and: () => (/* binding */ and),\n/* harmony export */   bitCount: () => (/* binding */ bitCount),\n/* harmony export */   bitLength: () => (/* binding */ bitLength),\n/* harmony export */   fromString: () => (/* binding */ fromString),\n/* harmony export */   inPlaceAnd: () => (/* binding */ inPlaceAnd),\n/* harmony export */   isZero: () => (/* binding */ isZero),\n/* harmony export */   setBit: () => (/* binding */ setBit),\n/* harmony export */   toString: () => (/* binding */ toString),\n/* harmony export */   zero: () => (/* binding */ zero)\n/* harmony export */ });\n/* eslint-disable @typescript-eslint/ban-ts-comment */\n\nvar b64ToI = [];\nvar iToB64 = [];\nvar numBase = '0'.charCodeAt(0);\nvar lowerCaseBase = 'a'.charCodeAt(0);\nvar upperCaseBase = 'A'.charCodeAt(0);\nfor (var i = 0; i <= 9; ++i) {\n  b64ToI[numBase + i] = i;\n  iToB64[i] = String.fromCharCode(numBase + i);\n}\nfor (var _i = 0; _i < 26; ++_i) {\n  b64ToI[lowerCaseBase + _i] = _i + 10;\n  iToB64[_i + 10] = String.fromCharCode(lowerCaseBase + _i);\n  b64ToI[upperCaseBase + _i] = _i + 36;\n  iToB64[_i + 36] = String.fromCharCode(upperCaseBase + _i);\n}\nb64ToI['-'.charCodeAt(0)] = 62;\niToB64[62] = '-';\nb64ToI['_'.charCodeAt(0)] = 63;\niToB64[63] = '_';\nfunction popCount(v) {\n  v -= v >>> 1 & 0x55555555;\n  v = (v & 0x33333333) + (v >>> 2 & 0x33333333);\n  return (v + (v >>> 4) & 0xf0f0f0f) * 0x1010101 >>> 24;\n}\nfunction zero() {\n  return [0];\n}\nfunction fromString(input, base) {\n  if (base === 32) {\n    input = input.toLowerCase();\n  }\n  // We only use 30 bits out of 32 max but it keeps everything simple\n  var bitsPerChar = base === 32 ? 5 : 6;\n  var charsPerNum = base === 32 ? 6 : 5;\n  var nums = [];\n  var usedInts = 0;\n  for (var _i2 = 0; _i2 < input.length; ++_i2) {\n    var index = input.length - _i2 - 1;\n    // @ts-expect-error\n    var x = b64ToI[input.charCodeAt(index)];\n    var mod = _i2 % charsPerNum;\n    if (mod === 0) {\n      nums[usedInts++] = x;\n    } else {\n      nums[usedInts - 1] |= x << mod * bitsPerChar;\n    }\n  }\n  return nums;\n}\nfunction isZero(ba) {\n  return ba.length === 0 || ba.length === 1 && ba[0] === 0;\n}\nfunction clamp(ba) {\n  while (ba.length > 1 && ba[ba.length - 1] === 0) {\n    ba.pop();\n  }\n}\nfunction setBit(ba, index) {\n  var numIndex = Math.floor(index / 30);\n  var rem = index % 30;\n  for (var _i3 = ba.length; _i3 < numIndex + 1; _i3 += 1) {\n    ba.push(0);\n  }\n  ba[numIndex] |= 1 << rem;\n}\nfunction toString(ba, base) {\n  var bitsPerChar = base === 32 ? 5 : 6;\n  var charsPerNum = base === 32 ? 6 : 5;\n  var mask = (1 << bitsPerChar) - 1;\n  var s = '';\n  for (var _i4 = ba.length - 1; _i4 >= 0; --_i4) {\n    for (var j = charsPerNum - 1; j >= 0; --j) {\n      // @ts-expect-error\n      var _char = iToB64[ba[_i4] >> j * bitsPerChar & mask];\n      if (s || _char !== '0') {\n        s += _char;\n      }\n    }\n  }\n  return s || '0';\n}\nfunction bitLength(ba) {\n  if (!ba.length) {\n    return 0;\n  }\n  // @ts-expect-error\n  return 30 * (ba.length - 1) + (32 - Math.clz32(ba[ba.length - 1]));\n}\n\n/** TODO we can make a faster version if we expect bit array to be sparse */\nfunction bitCount(ba) {\n  var sum = 0;\n  for (var _i5 = 0; _i5 < ba.length; _i5 += 1) {\n    if (ba[_i5]) {\n      // @ts-expect-error\n      sum += popCount(ba[_i5]);\n    }\n  }\n  return sum;\n}\nfunction and(ba, other) {\n  var nums = [];\n  var usedInts = Math.min(ba.length, other.length);\n  for (var _i6 = 0; _i6 < usedInts; ++_i6) {\n    // @ts-expect-error\n    nums[_i6] = ba[_i6] & other[_i6];\n  }\n  clamp(nums);\n  return nums;\n}\nfunction inPlaceAnd(ba, other) {\n  for (var _i7 = 0; _i7 < ba.length; ++_i7) {\n    if (_i7 < other.length) {\n      // @ts-expect-error\n      ba[_i7] &= other[_i7];\n    } else {\n      ba[_i7] = 0;\n    }\n  }\n  clamp(ba);\n}\nfunction activeBits(ba) {\n  var ret = [];\n  for (var _i8 = ba.length - 1; _i8 >= 0; _i8--) {\n    var num = ba[_i8];\n    while (num !== 0) {\n      // @ts-expect-error\n      var t = 31 - Math.clz32(num);\n      // @ts-expect-error\n      num ^= 1 << t;\n      ret.push(_i8 * 30 + t);\n    }\n  }\n  return ret;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/bitArray.ts\n");

/***/ }),

/***/ "./lib/gridBase.ts":
/*!*************************!*\
  !*** ./lib/gridBase.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cellIndex: () => (/* binding */ cellIndex),\n/* harmony export */   entriesFromCells: () => (/* binding */ entriesFromCells),\n/* harmony export */   entryAndCrossAtPosition: () => (/* binding */ entryAndCrossAtPosition),\n/* harmony export */   entryAtPosition: () => (/* binding */ entryAtPosition),\n/* harmony export */   entryIndexAtPosition: () => (/* binding */ entryIndexAtPosition),\n/* harmony export */   entryWord: () => (/* binding */ entryWord),\n/* harmony export */   getCrosses: () => (/* binding */ getCrosses),\n/* harmony export */   getEntryCells: () => (/* binding */ getEntryCells),\n/* harmony export */   gridWithEntrySet: () => (/* binding */ gridWithEntrySet),\n/* harmony export */   hasUnches: () => (/* binding */ hasUnches),\n/* harmony export */   posForIndex: () => (/* binding */ posForIndex),\n/* harmony export */   setVal: () => (/* binding */ setVal),\n/* harmony export */   valAt: () => (/* binding */ valAt)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ \"./lib/types.ts\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\nfunction hasUnches(grid) {\n  var _iterator = _createForOfIteratorHelper(grid.entriesByCell),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var crosses = _step.value;\n      if (crosses[0].entryIndex !== null && crosses[1].entryIndex === null) {\n        return true;\n      }\n      if (crosses[0].entryIndex === null && crosses[1].entryIndex !== null) {\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return false;\n}\nfunction entriesByCell(grid, pos) {\n  var entries = grid.entriesByCell[pos.row * grid.width + pos.col];\n  if (entries === undefined) {\n    throw new Error('out of bounds in entriesByCell');\n  }\n  return entries;\n}\n\n/**\r\n * Given an entry, get the crossing entries.\r\n *\r\n * Returns an array of (entry index, letter idx w/in that entry) of crosses.\r\n */\nfunction getCrosses(grid, entry) {\n  var crossDir = entry.direction === _types__WEBPACK_IMPORTED_MODULE_0__.Direction.Across ? _types__WEBPACK_IMPORTED_MODULE_0__.Direction.Down : _types__WEBPACK_IMPORTED_MODULE_0__.Direction.Across;\n  var crosses = [];\n  entry.cells.forEach(function (cellIndex) {\n    crosses.push(entriesByCell(grid, cellIndex)[crossDir]);\n  });\n  return crosses;\n}\nfunction valAt(grid, pos) {\n  var res = grid.cells[pos.row * grid.width + pos.col];\n  if (res === undefined) {\n    throw new Error('out of bounds valAt');\n  }\n  return res;\n}\nfunction entryWord(grid, entryIndex) {\n  var entry = grid.entries[entryIndex];\n  if (entry === undefined) {\n    throw new Error('entry oob');\n  }\n  return entry.cells.map(function (pos) {\n    return valAt(grid, pos);\n  }).join('');\n}\nfunction setVal(grid, pos, val) {\n  grid.cells[pos.row * grid.width + pos.col] = val;\n}\nfunction cellIndex(grid, pos) {\n  return pos.row * grid.width + pos.col;\n}\nfunction posForIndex(grid, index) {\n  return {\n    col: index % grid.width,\n    row: Math.floor(index / grid.width) % grid.height\n  };\n}\nfunction entryIndexAtPosition(grid, pos) {\n  var entriesAtCell = entriesByCell(grid, pos);\n  var currentEntryIndex = entriesAtCell[pos.dir];\n  return currentEntryIndex.entryIndex;\n}\nfunction entryAtPosition(grid, pos) {\n  var entriesAtCell = entriesByCell(grid, pos);\n  var currentEntryIndex = entriesAtCell[pos.dir];\n  if (currentEntryIndex.entryIndex === null) {\n    return [null, 0];\n  }\n  var entry = grid.entries[currentEntryIndex.entryIndex];\n  if (entry === undefined) {\n    throw new Error('entry oob');\n  }\n  return [entry, currentEntryIndex.cellIndex];\n}\nfunction entryAndCrossAtPosition(grid, pos) {\n  var entries = entriesByCell(grid, pos);\n  var currentEntry = entries[pos.dir];\n  var currentCross = entries[pos.dir === _types__WEBPACK_IMPORTED_MODULE_0__.Direction.Across ? _types__WEBPACK_IMPORTED_MODULE_0__.Direction.Down : _types__WEBPACK_IMPORTED_MODULE_0__.Direction.Across];\n  return [currentEntry.entryIndex !== null && grid.entries[currentEntry.entryIndex] || null, currentCross.entryIndex !== null && grid.entries[currentCross.entryIndex] || null];\n}\nfunction getEntryCells(grid, pos) {\n  var highlights = [];\n  var entry = entryAtPosition(grid, pos);\n  if (entry[0] !== null) {\n    highlights = entry[0].cells;\n  }\n  return highlights;\n}\nfunction entriesFromCells(width, height, cells\n// vBars: Set<number>,\n// hBars: Set<number>\n) {\n  var entriesByCell = [];\n  cells.forEach(function () {\n    entriesByCell.push([{\n      entryIndex: null,\n      wordIndex: 0,\n      cellIndex: 0\n    }, {\n      entryIndex: null,\n      wordIndex: 0,\n      cellIndex: 0\n    }]);\n  });\n  var entries = [];\n  for (var y = 0; y < height; y += 1) {\n    for (var x = 0; x < width; x += 1) {\n      var i = x + y * width;\n      for (var _i = 0, _arr = [_types__WEBPACK_IMPORTED_MODULE_0__.Direction.Across, _types__WEBPACK_IMPORTED_MODULE_0__.Direction.Down]; _i < _arr.length; _i++) {\n        var dir = _arr[_i];\n        var xincr = dir === _types__WEBPACK_IMPORTED_MODULE_0__.Direction.Across ? 1 : 0;\n        var yincr = dir === _types__WEBPACK_IMPORTED_MODULE_0__.Direction.Down ? 1 : 0;\n        var iincr = xincr + yincr * width;\n        //const iBars = dir === Direction.Across ? vBars : hBars;\n        var isStartOfRow = dir === _types__WEBPACK_IMPORTED_MODULE_0__.Direction.Across && x === 0 || dir === _types__WEBPACK_IMPORTED_MODULE_0__.Direction.Down && y === 0;\n        var isStartOfEntry = cells[i] !== '.' && (isStartOfRow || cells[i - iincr] === '.' /*|| iBars.has(i - iincr)*/) && x + xincr < width && y + yincr < height && cells[i + iincr] !== '.' /*&&\r\n                                                                                                                                                                                               !iBars.has(i)*/;\n\n        if (!isStartOfEntry) {\n          continue;\n        }\n        var entryCells = [];\n        var entryPattern = '';\n        var isComplete = true;\n        var xt = x;\n        var yt = y;\n        var wordlen = 0;\n        while (xt < width && yt < height) {\n          var cellId = yt * width + xt;\n          var cellVal = cells[cellId];\n          var entry = entriesByCell[cellId];\n          if (cellVal === undefined || entry === undefined) {\n            throw new Error('cellid oob');\n          }\n          if (cellVal === '.') {\n            break;\n          }\n          entry[dir] = {\n            entryIndex: entries.length,\n            wordIndex: entryPattern.length,\n            cellIndex: wordlen\n          };\n          if (cellVal === ' ') {\n            isComplete = false;\n          }\n          entryCells.push({\n            row: yt,\n            col: xt\n          });\n          entryPattern += cellVal;\n          xt += xincr;\n          yt += yincr;\n          wordlen += 1;\n\n          // if (iBars.has(cellId)) {\n          //   break;\n          // }\n        }\n\n        entries.push({\n          index: entries.length,\n          pattern: entryPattern,\n          direction: dir,\n          cells: entryCells,\n          completedWord: isComplete ? entryPattern : null\n        });\n      }\n    }\n  }\n  return [entries, entriesByCell];\n}\n\n/*\r\n * Get a new grid with an entry filled out.\r\n *\r\n * This is for builder use.\r\n *\r\n * If you know the new fill doesn't conflict with the existing grid, use\r\n * `gridWithEntryDecided` instead for better performance.\r\n */\nfunction gridWithEntrySet(grid, entryIndex, word) {\n  var newGrid = _objectSpread(_objectSpread({}, grid), {}, {\n    cells: grid.cells.slice(),\n    entries: grid.entries.slice()\n  });\n  var entry = newGrid.entries[entryIndex];\n  if (entry === undefined) {\n    throw new Error('entryIndex oob');\n  }\n  var crosses = getCrosses(newGrid, entry);\n  var j = -1;\n  for (var i = 0; i < word.length; i += 1) {\n    var _crosses$j$entryIndex, _crosses$j;\n    j += 1;\n    var pos = entry.cells[j];\n    if (pos === undefined) {\n      throw new Error('oob');\n    }\n    var currentVal = valAt(newGrid, pos);\n    if (currentVal !== ' ') {\n      if (currentVal === word.slice(i, i + currentVal.length)) {\n        // No change needed for this cell\n        i = i + currentVal.length - 1;\n        continue;\n      }\n    }\n    var newLetter = word[i];\n    if (newLetter === undefined) {\n      throw new Error('oob');\n    }\n    // update cells\n    setVal(newGrid, pos, newLetter);\n\n    // update crossing entry\n    var crossIndex = (_crosses$j$entryIndex = (_crosses$j = crosses[j]) === null || _crosses$j === void 0 ? void 0 : _crosses$j.entryIndex) !== null && _crosses$j$entryIndex !== void 0 ? _crosses$j$entryIndex : null;\n    if (crossIndex === null) {\n      continue;\n    }\n    var cross = newGrid.entries[crossIndex];\n    if (cross === undefined) {\n      throw new Error('oob');\n    }\n    var completedCross = '';\n    var _iterator2 = _createForOfIteratorHelper(cross.cells),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var cid = _step2.value;\n        var val = valAt(newGrid, cid);\n        if (val === ' ') {\n          completedCross = null;\n          break;\n        } else {\n          completedCross += val;\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    cross.completedWord = completedCross;\n  }\n  // update entry itself\n  entry.completedWord = word;\n  return newGrid;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/gridBase.ts\n");

/***/ }),

/***/ "./lib/types.ts":
/*!**********************!*\
  !*** ./lib/types.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ALLOWABLE_GRID_CHARS: () => (/* binding */ ALLOWABLE_GRID_CHARS),\n/* harmony export */   BLOCK: () => (/* binding */ BLOCK),\n/* harmony export */   CheatUnit: () => (/* binding */ CheatUnit),\n/* harmony export */   Direction: () => (/* binding */ Direction),\n/* harmony export */   KeyK: () => (/* binding */ KeyK),\n/* harmony export */   PrefillSquares: () => (/* binding */ PrefillSquares),\n/* harmony export */   Symmetry: () => (/* binding */ Symmetry),\n/* harmony export */   fromKeyString: () => (/* binding */ fromKeyString),\n/* harmony export */   fromKeyboardEvent: () => (/* binding */ fromKeyboardEvent),\n/* harmony export */   hasOwnProperty: () => (/* binding */ hasOwnProperty),\n/* harmony export */   isAutofillCompleteMessage: () => (/* binding */ isAutofillCompleteMessage),\n/* harmony export */   isAutofillMessage: () => (/* binding */ isAutofillMessage),\n/* harmony export */   isAutofillResultMessage: () => (/* binding */ isAutofillResultMessage),\n/* harmony export */   isCancelAutofillMessage: () => (/* binding */ isCancelAutofillMessage),\n/* harmony export */   isLoadDBMessage: () => (/* binding */ isLoadDBMessage)\n/* harmony export */ });\n/* harmony import */ var fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fp-ts/lib/Option */ \"../node_modules/fp-ts/lib/Option.js\");\n/* harmony import */ var fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\nvar BLOCK = '.';\nvar Symmetry = /*#__PURE__*/function (Symmetry) {\n  Symmetry[Symmetry[\"Rotational\"] = 0] = \"Rotational\";\n  Symmetry[Symmetry[\"Horizontal\"] = 1] = \"Horizontal\";\n  Symmetry[Symmetry[\"Vertical\"] = 2] = \"Vertical\";\n  Symmetry[Symmetry[\"None\"] = 3] = \"None\";\n  Symmetry[Symmetry[\"DiagonalNESW\"] = 4] = \"DiagonalNESW\";\n  Symmetry[Symmetry[\"DiagonalNWSE\"] = 5] = \"DiagonalNWSE\";\n  return Symmetry;\n}({});\nvar CheatUnit = /*#__PURE__*/function (CheatUnit) {\n  CheatUnit[CheatUnit[\"Square\"] = 0] = \"Square\";\n  CheatUnit[CheatUnit[\"Entry\"] = 1] = \"Entry\";\n  CheatUnit[CheatUnit[\"Puzzle\"] = 2] = \"Puzzle\";\n  return CheatUnit;\n}({});\nvar PrefillSquares = /*#__PURE__*/function (PrefillSquares) {\n  PrefillSquares[PrefillSquares[\"EvenEven\"] = 0] = \"EvenEven\";\n  PrefillSquares[PrefillSquares[\"OddOdd\"] = 1] = \"OddOdd\";\n  PrefillSquares[PrefillSquares[\"EvenOdd\"] = 2] = \"EvenOdd\";\n  PrefillSquares[PrefillSquares[\"OddEven\"] = 3] = \"OddEven\";\n  return PrefillSquares;\n}({});\nvar Direction = /*#__PURE__*/function (Direction) {\n  Direction[Direction[\"Across\"] = 0] = \"Across\";\n  Direction[Direction[\"Down\"] = 1] = \"Down\";\n  return Direction;\n}({});\nfunction isAutofillResultMessage(msg) {\n  return msg.type === 'autofill-result';\n}\nfunction isAutofillCompleteMessage(msg) {\n  return msg.type === 'autofill-complete';\n}\nfunction isLoadDBMessage(msg) {\n  return msg.type === 'loaddb';\n}\nfunction isCancelAutofillMessage(msg) {\n  return msg.type === 'cancel';\n}\nfunction isAutofillMessage(msg) {\n  return msg.type === 'autofill';\n}\n\n// This is kind of a hack but it helps us to ensure we only query for constructorPages on server side\n\nvar KeyK = /*#__PURE__*/function (KeyK) {\n  KeyK[KeyK[\"ArrowRight\"] = 0] = \"ArrowRight\";\n  KeyK[KeyK[\"ArrowLeft\"] = 1] = \"ArrowLeft\";\n  KeyK[KeyK[\"ArrowUp\"] = 2] = \"ArrowUp\";\n  KeyK[KeyK[\"ArrowDown\"] = 3] = \"ArrowDown\";\n  KeyK[KeyK[\"Space\"] = 4] = \"Space\";\n  KeyK[KeyK[\"Tab\"] = 5] = \"Tab\";\n  KeyK[KeyK[\"ShiftTab\"] = 6] = \"ShiftTab\";\n  KeyK[KeyK[\"Enter\"] = 7] = \"Enter\";\n  KeyK[KeyK[\"ShiftEnter\"] = 8] = \"ShiftEnter\";\n  KeyK[KeyK[\"Backspace\"] = 9] = \"Backspace\";\n  KeyK[KeyK[\"Delete\"] = 10] = \"Delete\";\n  KeyK[KeyK[\"Escape\"] = 11] = \"Escape\";\n  KeyK[KeyK[\"Backtick\"] = 12] = \"Backtick\";\n  KeyK[KeyK[\"Dot\"] = 13] = \"Dot\";\n  KeyK[KeyK[\"Comma\"] = 14] = \"Comma\";\n  KeyK[KeyK[\"Exclamation\"] = 15] = \"Exclamation\";\n  KeyK[KeyK[\"Octothorp\"] = 16] = \"Octothorp\";\n  KeyK[KeyK[\"AllowedCharacter\"] = 17] = \"AllowedCharacter\";\n  KeyK[KeyK[\"NumLayout\"] = 18] = \"NumLayout\";\n  KeyK[KeyK[\"AbcLayout\"] = 19] = \"AbcLayout\";\n  KeyK[KeyK[\"Direction\"] = 20] = \"Direction\";\n  KeyK[KeyK[\"Next\"] = 21] = \"Next\";\n  KeyK[KeyK[\"Prev\"] = 22] = \"Prev\";\n  KeyK[KeyK[\"NextEntry\"] = 23] = \"NextEntry\";\n  KeyK[KeyK[\"PrevEntry\"] = 24] = \"PrevEntry\";\n  KeyK[KeyK[\"OskBackspace\"] = 25] = \"OskBackspace\";\n  KeyK[KeyK[\"Rebus\"] = 26] = \"Rebus\";\n  KeyK[KeyK[\"Block\"] = 27] = \"Block\";\n  return KeyK;\n}({});\nvar ALLOWABLE_GRID_CHARS = /^[A-Za-z0-9Ññ&]$/;\nfunction fromKeyString(string) {\n  return fromKeyboardEvent({\n    key: string\n  });\n}\nfunction fromKeyboardEvent(event) {\n  if (event.target) {\n    var _event$target;\n    var tagName = (_event$target = event.target) === null || _event$target === void 0 || (_event$target = _event$target.tagName) === null || _event$target === void 0 ? void 0 : _event$target.toLowerCase();\n    if (tagName === 'textarea' || tagName === 'input') {\n      return fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0__.none;\n    }\n  }\n  if (event.metaKey || event.altKey || event.ctrlKey) {\n    return fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0__.none;\n  }\n  var basicKey = function () {\n    switch (event.key) {\n      case 'ArrowLeft':\n        return (0,fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0__.some)(KeyK.ArrowLeft);\n      case 'ArrowRight':\n        return (0,fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0__.some)(KeyK.ArrowRight);\n      case 'ArrowUp':\n        return (0,fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0__.some)(KeyK.ArrowUp);\n      case 'ArrowDown':\n        return (0,fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0__.some)(KeyK.ArrowDown);\n      case ' ':\n        return (0,fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0__.some)(KeyK.Space);\n      case 'Tab':\n        return !event.shiftKey ? (0,fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0__.some)(KeyK.Tab) : (0,fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0__.some)(KeyK.ShiftTab);\n      case 'Enter':\n        return !event.shiftKey ? (0,fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0__.some)(KeyK.Enter) : (0,fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0__.some)(KeyK.ShiftEnter);\n      case 'Backspace':\n        return (0,fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0__.some)(KeyK.Backspace);\n      case 'Delete':\n        return (0,fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0__.some)(KeyK.Delete);\n      case 'Escape':\n        return (0,fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0__.some)(KeyK.Escape);\n      case '`':\n        return (0,fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0__.some)(KeyK.Backtick);\n      case '.':\n        return (0,fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0__.some)(KeyK.Dot);\n      case ',':\n        return (0,fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0__.some)(KeyK.Comma);\n      case '!':\n        return (0,fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0__.some)(KeyK.Exclamation);\n      case '#':\n        return (0,fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0__.some)(KeyK.Octothorp);\n      // Keys specific to on-screen keyboard\n      case '{num}':\n        return (0,fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0__.some)(KeyK.NumLayout);\n      case '{abc}':\n        return (0,fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0__.some)(KeyK.AbcLayout);\n      case '{dir}':\n        return (0,fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0__.some)(KeyK.Direction);\n      case '{next}':\n        return (0,fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0__.some)(KeyK.Next);\n      case '{prev}':\n        return (0,fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0__.some)(KeyK.Prev);\n      case '{nextEntry}':\n        return (0,fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0__.some)(KeyK.NextEntry);\n      case '{prevEntry}':\n        return (0,fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0__.some)(KeyK.PrevEntry);\n      case '{bksp}':\n        return (0,fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0__.some)(KeyK.OskBackspace);\n      case '{rebus}':\n        return (0,fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0__.some)(KeyK.Rebus);\n      case '{block}':\n        return (0,fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0__.some)(KeyK.Block);\n      default:\n        return fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0__.none;\n    }\n  }();\n  if ((0,fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0__.isSome)(basicKey)) {\n    return (0,fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0__.some)({\n      k: basicKey.value\n    });\n  }\n  if (event.key.match(ALLOWABLE_GRID_CHARS)) {\n    return (0,fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0__.some)({\n      k: KeyK.AllowedCharacter,\n      c: event.key\n    });\n  }\n  return fp_ts_lib_Option__WEBPACK_IMPORTED_MODULE_0__.none;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/types.ts\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/******/ 	// the startup function
/******/ 	__webpack_require__.x = () => {
/******/ 		// Load entry module and return exports
/******/ 		// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 		var __webpack_exports__ = __webpack_require__.O(undefined, ["vendors-node_modules_fp-ts_lib_Option_js-node_modules_io-ts_es6_index_js-node_modules_io-ts_l-8d9ed5"], () => (__webpack_require__("./lib/autofill.worker.ts")))
/******/ 		__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 		return __webpack_exports__;
/******/ 	};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/ensure chunk */
/******/ 	(() => {
/******/ 		__webpack_require__.f = {};
/******/ 		// This file contains only the entry chunk.
/******/ 		// The chunk loading function for additional chunks
/******/ 		__webpack_require__.e = (chunkId) => {
/******/ 			return Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {
/******/ 				__webpack_require__.f[key](chunkId, promises);
/******/ 				return promises;
/******/ 			}, []));
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks and sibling chunks for the entrypoint
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "" + chunkId + ".js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src;
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) {
/******/ 					var i = scripts.length - 1;
/******/ 					while (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/importScripts chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded chunks
/******/ 		// "1" means "already loaded"
/******/ 		var installedChunks = {
/******/ 			"lib_autofill_worker_ts": 1
/******/ 		};
/******/ 		
/******/ 		// importScripts chunk loading
/******/ 		var installChunk = (data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			for(var moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) runtime(__webpack_require__);
/******/ 			while(chunkIds.length)
/******/ 				installedChunks[chunkIds.pop()] = 1;
/******/ 			parentChunkLoadingFunction(data);
/******/ 		};
/******/ 		__webpack_require__.f.i = (chunkId, promises) => {
/******/ 			// "1" is the signal for "already loaded"
/******/ 			if(!installedChunks[chunkId]) {
/******/ 				if(true) { // all chunks have JS
/******/ 					importScripts(__webpack_require__.p + __webpack_require__.u(chunkId));
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkwebapplication1"] = self["webpackChunkwebapplication1"] || [];
/******/ 		var parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);
/******/ 		chunkLoadingGlobal.push = installChunk;
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/startup chunk dependencies */
/******/ 	(() => {
/******/ 		var next = __webpack_require__.x;
/******/ 		__webpack_require__.x = () => {
/******/ 			return __webpack_require__.e("vendors-node_modules_fp-ts_lib_Option_js-node_modules_io-ts_es6_index_js-node_modules_io-ts_l-8d9ed5").then(next);
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// run startup
/******/ 	var __webpack_exports__ = __webpack_require__.x();
/******/ 	
/******/ })()
;